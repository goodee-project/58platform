<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodee.gdj58.platform.mapper.EmployeeMapper">
	
	<!-- 직원 비밀번호 변경시 현재 비밀번호 틀림체크 -->
	<select id="selectEmployeePwCkByUpdate" parameterType="java.util.Map" resultType="goodee.gdj58.platform.vo.Employee">
		SELECT 
			employee_id employeeId
		FROM employee 
		WHERE employee_id = #{employeeId} AND employee_pw = PASSWORD(#{oldPw})
	</select>
	
	<!-- 비밀번호 변경 이력 3개 쌓이면 pk가 가장 작은것 삭제 -->
	<delete id="deletePwHistory" parameterType="string">
		DELETE FROM	pw_history 
		WHERE id = #{id}
		AND pw_history_no = (SELECT MIN(pw_history_no) FROM pw_history WHERE id = #{id})
	</delete>
	
	<!-- 직원 비밀번호 변경이력 개수 조회 -->
	<select id="selectPwHistoryCount" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM pw_history WHERE id = #{id}
	</select>
	
	<!-- 직원 비밀번호 변경시 변경 이력 -->
	<insert id="insertPwHistoryByModifyEmployeePw" parameterType="goodee.gdj58.platform.vo.PwHistory">
		INSERT INTO pw_history (
			id, PASSWORD, createdate
		) VALUES (
			#{id}, PASSWORD(#{password}), CURDATE()
		)
	</insert>
	
	<!-- 직원 비밀번호 변경 -->
	<update id="updateEmployeePw" parameterType="java.util.Map">
		UPDATE
			employee
		SET
			employee_pw = PASSWORD(#{newPw})
		WHERE employee_id = #{employeeId} AND employee_pw = PASSWORD(#{oldPw})
	</update>
	
	<!-- 직원 비밀번호 변경을 위한 조회 -->
	<select id="selectEmployeePwByUpdate" parameterType="string" resultType="goodee.gdj58.platform.vo.Employee">
		SELECT
			employee_id employeeId
			, employee_pw employeePw
			, employee_name employeeName
			,employee_level employeeLevel
		FROM employee
		WHERE employee_id = #{employeeId}
	</select>
	
	<!-- 비밀번호 변경 이력 중복검사 null을 반환하면 사용가능한 비밀번호, 비밀번호를 반환하면 사용불가능한 비밀번호 -->
	<select id="selectPwHistoryCk" parameterType="goodee.gdj58.platform.vo.PwHistory" resultType="string">
		SELECT 
			password
		FROM pw_history 
		WHERE id = #{id} AND PASSWORD = PASSWORD(#{password})
	</select>
	
	<!-- 직원 개인정보 변경 -->
	<update id="updateEmployeeInfo" parameterType="goodee.gdj58.platform.vo.EmployeeInfo">
		UPDATE 
			employee_info 
		SET 
			employee_phone = #{employeePhone}
			, employee_email = #{employeeEmail} 
		WHERE employee_id = #{employeeId}
	</update>
	
	<!-- 직원 개인정보 변경을 위한 조회 
	<select id="selectEmployeeByUpdate" parameterType="string" resultType="java.util.Map">
		SELECT 
			e.employee_id employeeId
			, e.employee_name employeeName
			, e.employee_level employeeLevel
			, ei.employee_phone employeePhone
			, ei.employee_email employeeEmail
			, ei.createdate createdate
		FROM employee e 
		INNER JOIN employee_info ei
		ON e.employee_id = ei.employee_id
		WHERE e.employee_id = #{employeeId}
	</select>
	-->
	
	<!-- 직원 myPage -->
	<select id="selectEmployeeOne" parameterType="string" resultType="java.util.Map">
		SELECT 
			e.employee_id employeeId
			, e.employee_name employeeName
			, e.employee_level employeeLevel
			, ei.employee_phone employeePhone
			, ei.employee_email employeeEmail
			, ei.createdate createdate
		FROM employee e 
		INNER JOIN employee_info ei
		ON e.employee_id = ei.employee_id
		WHERE e.employee_id = #{employeeId}
	</select>
	
	<!-- 직원 비활성화 -->
	<update id="updateEmployeeDeactive" parameterType="string">
		UPDATE total_id SET 
			total_id_active = '비활성화'
			, total_id_deactive_memo = '퇴사'
			, total_id_deactive_date = CURDATE()
			, total_id_reactive_date = NULL
		WHERE id = #{id}
	</update>
	
	<!-- 직원 활성화 -->
	<update id="updateEmployeeActive" parameterType="string">
		UPDATE total_id SET 
			total_id_active = '활성화'
			, total_id_deactive_memo = NULL
			, total_id_deactive_date = NULL
			, total_id_reactive_date = CURDATE()
		WHERE id = #{id}
	</update>
	
	<!-- 직원등록 -->
	<insert id="insertEmployee" parameterType="goodee.gdj58.platform.vo.Employee">
		INSERT INTO employee(
			employee_id
			, employee_pw
			, employee_name
			, employee_level
		) VALUES (
			#{employeeId}
			, PASSWORD(#{employeePw})
			, #{employeeName}
			, '사원'
		)
	</insert>
	
	<!-- 직원정보등록 -->
	<insert id="insertEmployeeInfo" parameterType="goodee.gdj58.platform.vo.EmployeeInfo">
		INSERT INTO employee_info (
			employee_id
			, employee_phone
			, employee_email
			, createdate
		) VALUES (
			#{employeeId}
			, #{employeePhone}
			, #{employeeEmail}
			, CURDATE()
		)
	</insert>
	
	<!-- totalId 등록 -->
	<insert id="insertTotalId" parameterType="goodee.gdj58.platform.vo.TotalId">
		INSERT INTO total_id (
			id
			, total_id_kind
			, total_id_active
			, createdate
		) VALUES (
			#{id}
			, '플랫폼'
			, '활성화'
			, CURDATE()
		)
	</insert>
	
	<!-- 회원가입시 pw_history에 등록 -->
	<insert id="insertPwHistory" parameterType="goodee.gdj58.platform.vo.PwHistory">
		INSERT INTO pw_history (
			id, PASSWORD, createdate
		) VALUES (
			#{id}, PASSWORD(#{password}), CURDATE()
		)
	</insert>
	
	<!-- 아이디 중복 체크 -->
	<select id="selectTotalIdCk" parameterType="string" resultType="string">
		SELECT 
			id 
		FROM total_id 
		WHERE id = #{employeeId}
	</select>
	
	<!-- 직원 목록 -->
	<select id="selectEmployeeList" resultType="java.util.Map">
		SELECT 
			e.employee_id employeeId
			, e.employee_name employeeName
			, e.employee_level employeeLevel
			, ti.total_id_active totalIdActive
			, ei.employee_phone employeePhone
			, ei.employee_email employeeEmail
			, ei.createdate createdate
		FROM employee e 
		INNER JOIN employee_info ei
		ON e.employee_id = ei.employee_id
		INNER JOIN total_id ti
		ON e.employee_id = ti.id
		ORDER BY ei.createdate DESC;
	</select>

	<!-- 로그인 비밀번호 체크 -->
	<select id="selectEmployeePw" parameterType="string" resultType="string">
		SELECT 
			employee_pw employeePw
		FROM employee 
		WHERE employee_id = #{employeeId}
	</select>

	<!-- 직원로그인 -->
	<select id="login" parameterType="goodee.gdj58.platform.vo.Employee" resultType="goodee.gdj58.platform.vo.Employee">
		SELECT 
			employee_id employeeId
			, employee_name employeeName
			, employee_level employeeLevel
		FROM employee 
		WHERE employee_id = #{employeeId} AND employee_pw = PASSWORD(#{employeePw})
	</select>
</mapper>